/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import javax.swing.filechooser.FileNameExtensionFilter;
/**
 *
 * @author asus
 */
public class CppSimChek extends javax.swing.JFrame {

    private String fileContent1;
    private String fileContent2;
    
    public void setFileContent1(String filePath) {
        this.fileContent1 = readFileContent(filePath);
    }

    public void setFileContent2(String filePath) {
        this.fileContent2 = readFileContent(filePath);
    }

    private String readFileContent(String filePath) {
        try {
            return new String(Files.readAllBytes(Paths.get(filePath)));
        } catch (IOException e) {
            e.printStackTrace();
            return null;
        }
    }

    public String getFileContent1() {
        return fileContent1;
    }

    public String getFileContent2() {
        return fileContent2;
    }
    /**
     * Creates new form CppSimChek
     */
     
    private int[] calculateKeywordFrequencies(String code, String[] keywords) {
        int[] frequencies = new int[keywords.length];
        for (int i = 0; i < keywords.length; i++) {
            frequencies[i] = countOccurrences(code, keywords[i]);
        }
        return frequencies;
    }
    
    private int countOccurrences(String code, String keyword) {
        int count = 0;
        int index = 0;
        while ((index = code.indexOf(keyword, index)) != -1) {
            count++;
            index += keyword.length();
        }
        return count;
    }
    
    // Removed duplicate method calculateCosineSimilarity
    public CppSimChek() {
        setTitle("Similarity C++ source code - F22040119 MUNTASIR");
        
        initComponents();
    }
    private String selectedFilePath;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        SelectBtn2 = new javax.swing.JButton();
        SelectBtn1 = new javax.swing.JButton();
        CalculateBtn = new javax.swing.JButton();
        UserIdentifierCheckBox = new javax.swing.JCheckBox();
        fileNameLebel1 = new javax.swing.JLabel();
        fileNameLebel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ContentFile1 = new javax.swing.JTextPane();
        jScrollPane3 = new javax.swing.JScrollPane();
        ContentFile2 = new javax.swing.JTextPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        userIdentidierText = new javax.swing.JTextArea();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Zilla Slab", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 51, 153));
        jLabel1.setText("Similarity C++ source code");

        SelectBtn2.setBackground(new java.awt.Color(0, 0, 102));
        SelectBtn2.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        SelectBtn2.setForeground(new java.awt.Color(255, 255, 255));
        SelectBtn2.setText("Select C++ Program 2");
        SelectBtn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectBtn2ActionPerformed(evt);
            }
        });

        SelectBtn1.setBackground(new java.awt.Color(0, 0, 102));
        SelectBtn1.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        SelectBtn1.setForeground(new java.awt.Color(255, 255, 255));
        SelectBtn1.setText("Select C++ Program 1");
        SelectBtn1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        SelectBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SelectBtn1ActionPerformed(evt);
            }
        });

        CalculateBtn.setBackground(new java.awt.Color(0, 0, 102));
        CalculateBtn.setFont(new java.awt.Font("Yu Gothic", 1, 14)); // NOI18N
        CalculateBtn.setForeground(java.awt.Color.white);
        CalculateBtn.setText("Calculate Similarity");
        CalculateBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        CalculateBtn.setMargin(new java.awt.Insets(10, 14, 3, 14));
        CalculateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateBtnActionPerformed(evt);
            }
        });

        UserIdentifierCheckBox.setFont(new java.awt.Font("Yu Gothic UI Semibold", 3, 14)); // NOI18N
        UserIdentifierCheckBox.setForeground(new java.awt.Color(0, 51, 153));
        UserIdentifierCheckBox.setText("Include User Identifier");
        UserIdentifierCheckBox.setMargin(new java.awt.Insets(0, 2, 2, 2));
        UserIdentifierCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UserIdentifierCheckBoxActionPerformed(evt);
            }
        });

        fileNameLebel1.setForeground(new java.awt.Color(0, 51, 153));
        fileNameLebel1.setText("file name 1");

        fileNameLebel2.setForeground(new java.awt.Color(0, 51, 153));
        fileNameLebel2.setText("file name 2");

        ContentFile1.setBackground(new java.awt.Color(204, 204, 255));
        ContentFile1.setMaximumSize(new java.awt.Dimension(300, 400));
        ContentFile1.setPreferredSize(new java.awt.Dimension(300, 400));
        jScrollPane2.setViewportView(ContentFile1);

        ContentFile2.setBackground(new java.awt.Color(204, 204, 255));
        ContentFile2.setMaximumSize(new java.awt.Dimension(300, 400));
        ContentFile2.setPreferredSize(new java.awt.Dimension(300, 400));
        jScrollPane3.setViewportView(ContentFile2);

        userIdentidierText.setBackground(new java.awt.Color(153, 204, 255));
        userIdentidierText.setColumns(20);
        userIdentidierText.setRows(5);
        userIdentidierText.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(userIdentidierText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(249, 249, 249)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 561, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 270, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(UserIdentifierCheckBox)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(CalculateBtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(SelectBtn1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fileNameLebel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(SelectBtn2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(fileNameLebel2, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE))))
                        .addGap(37, 37, 37))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SelectBtn2, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SelectBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileNameLebel1)
                    .addComponent(fileNameLebel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(UserIdentifierCheckBox)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(CalculateBtn)
                .addGap(80, 80, 80))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private String filePath1;
    private String filePath2;
    private void SelectBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectBtn1ActionPerformed
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    fileChooser.setFileFilter(new FileNameExtensionFilter("C++ Files", "cpp"));
    int returnValue = fileChooser.showOpenDialog(null);
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        filePath1 = selectedFile.getAbsolutePath();
        String fileName = selectedFile.getName();
        fileNameLebel1.setText(fileName);
        
        // Read and display the content of the selected file
        try {
            String content = new String(Files.readAllBytes(Paths.get(filePath1)));
            ContentFile1.setText(content);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_SelectBtn1ActionPerformed

private void SelectBtn2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SelectBtn2ActionPerformed
    JFileChooser fileChooser = new JFileChooser();
    fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
    fileChooser.setFileFilter(new FileNameExtensionFilter("C++ Files", "cpp"));
    int returnValue = fileChooser.showOpenDialog(null);
    if (returnValue == JFileChooser.APPROVE_OPTION) {
        File selectedFile = fileChooser.getSelectedFile();
        filePath2 = selectedFile.getAbsolutePath();
        String fileName = selectedFile.getName();
        fileNameLebel2.setText(fileName);
        
        // Read and display the content of the selected file
        try {
            String content = new String(Files.readAllBytes(Paths.get(filePath2)));
            ContentFile2.setText(content);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_SelectBtn2ActionPerformed


private void CalculateBtnActionPerformed(java.awt.event.ActionEvent evt) {
    if (filePath1 == null || filePath2 == null) {
        JOptionPane.showMessageDialog(null, "Please select 2 cpp files to find similarity.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Read the contents of the two code files line by line
        List<String> lines1 = Files.readAllLines(Paths.get(filePath1));
        List<String> lines2 = Files.readAllLines(Paths.get(filePath2));

        // Extract similar lines
        StringBuilder similarLines = new StringBuilder();
        int similarLineCount = extractSimilarLines(lines1, lines2, similarLines);

        // Define C++ keywords
        String[] keywords = {"void", "int", "for", "char", "if", "else", "while", "do", "break", "class"};

        // Calculate keyword frequencies
        int[] freq1 = calculateKeywordFrequencies(String.join("\n", lines1), keywords);
        int[] freq2 = calculateKeywordFrequencies(String.join("\n", lines2), keywords);

        double similarityPercentage;
        if (UserIdentifierCheckBox.isSelected()) {
            // Get user input from the textarea
            String userInput = userIdentidierText.getText();

            // Replace user-defined identifiers in the lines
            List<String> modifiedLines1 = replaceUserIdentifiers(lines1, userInput);
            List<String> modifiedLines2 = replaceUserIdentifiers(lines2, userInput);

            // Calculate keyword frequencies for modified lines
            int[] modifiedFreq1 = calculateKeywordFrequencies(String.join("\n", modifiedLines1), keywords);
            int[] modifiedFreq2 = calculateKeywordFrequencies(String.join("\n", modifiedLines2), keywords);

            // Combine original and modified frequencies
            int[] combinedFreq1 = combineFrequencies(freq1, modifiedFreq1);
            int[] combinedFreq2 = combineFrequencies(freq2, modifiedFreq2);

            // Calculate the similarity (using cosine similarity)
            similarityPercentage = calculateCosineSimilarity(combinedFreq1, combinedFreq2) * 100;

        } else {
            // Calculate the similarity (using cosine similarity)
            similarityPercentage = calculateCosineSimilarity(freq1, freq2) * 100;
        }

        // Create and display the LoadingPage frame
        LoadingPage loadingPage = new LoadingPage();
        loadingPage.setVisible(true);

        // Use SwingWorker to handle the delay and frame transitions
        new SwingWorker<Void, Void>() {
            @Override
            protected Void doInBackground() throws Exception {
                // Wait for 3 seconds
                Thread.sleep(3000);
                return null;
            }

            @Override
            protected void done() {
                // Close the LoadingPage frame
                loadingPage.dispose();

                // Create and display the Result frame with the similarity percentage and similar lines
                Result resultFrame = new Result(String.format("%.2f%%", similarityPercentage), similarLines.toString(), similarLineCount, similarLines.toString());
                resultFrame.setVisible(true);

                // Close the CppSimChek frame
                CppSimChek.this.dispose();
            }
        }.execute();

    } catch (IOException ex) {
        ex.printStackTrace();
    }
}

// Method to replace user-defined identifiers in the lines
private List<String> replaceUserIdentifiers(List<String> lines, String userInput) {
    List<String> modifiedLines = new ArrayList<>(lines);
    if (userInput != null && !userInput.isEmpty()) {
        // Split user input by commas and create a map of user-defined identifier pairs
        String[] userIdentifiers = userInput.split(",");
        Map<String, String> identifierMap = new HashMap<>();
        for (String pair : userIdentifiers) {
            String[] identifiers = pair.split("\\s+");
            if (identifiers.length == 2) {
                identifierMap.put(identifiers[0].trim(), identifiers[1].trim());
            }
        }

        // Replace user-defined identifiers in the lines
        for (int i = 0; i < modifiedLines.size(); i++) {
            String line = modifiedLines.get(i);
            for (Map.Entry<String, String> entry : identifierMap.entrySet()) {
                line = line.replace(entry.getKey(), entry.getValue());
            }
            modifiedLines.set(i, line);
        }
    }
    return modifiedLines;
}

// Method to combine two frequency arrays
private int[] combineFrequencies(int[] freq1, int[] freq2) {
    int[] combinedFreq = new int[freq1.length];
    for (int i = 0; i < freq1.length; i++) {
        combinedFreq[i] = freq1[i] + freq2[i];
    }
    return combinedFreq;
}

// Method to calculate cosine similarity between two frequency arrays
private double calculateCosineSimilarity(int[] freq1, int[] freq2) {
    int dotProduct = 0;
    int normFreq1 = 0;
    int normFreq2 = 0;
    for (int i = 0; i < freq1.length; i++) {
        dotProduct += freq1[i] * freq2[i];
        normFreq1 += freq1[i] * freq1[i];
        normFreq2 += freq2[i] * freq2[i];
    }
    return dotProduct / (Math.sqrt(normFreq1) * Math.sqrt(normFreq2));
}

    public int extractSimilarLines(List<String> lines1, List<String> lines2, StringBuilder similarLines) {
        Set<String> linesSet2 = new HashSet<>();
        int similarLineCount = 0;
    
        for (String line : lines2) {
            String trimmedLine = line.trim();
            if (!trimmedLine.isEmpty() && !trimmedLine.equals("{") && !trimmedLine.equals("}")) {
                linesSet2.add(trimmedLine);
            }
        }
    
        boolean useCommaLogic = UserIdentifierCheckBox.isSelected();
        String userInput = userIdentidierText.getText();
    
        for (String line1 : lines1) {
            String trimmedLine1 = line1.trim();
            if (!trimmedLine1.isEmpty() && !trimmedLine1.equals("{") && !trimmedLine1.equals("}")) {
                for (String line2 : linesSet2) {
                    if (areLinesSimilar(trimmedLine1, line2, useCommaLogic, userInput)) {
                        similarLines.append(line1).append("\n");
                        similarLineCount++;
                        break;
                    }
                }
            }
        }
    
        return similarLineCount;
    }

    private boolean areLinesSimilar(String line1, String line2, boolean useCommaLogic, String userInput) {
        if (useCommaLogic && userInput != null && !userInput.isEmpty()) {
            // Split user input by commas and create a map of user-defined identifier pairs
            String[] userIdentifiers = userInput.split(",");
            Map<String, String> identifierMap = new HashMap<>();
            for (String pair : userIdentifiers) {
                String[] identifiers = pair.split("\\s+");
                if (identifiers.length == 2) {
                    identifierMap.put(identifiers[0].trim(), identifiers[1].trim());
                }
            }
    
            // Replace user-defined identifiers in the lines
            for (Map.Entry<String, String> entry : identifierMap.entrySet()) {
                line1 = line1.replace(entry.getKey(), entry.getValue());
                line2 = line2.replace(entry.getValue(), entry.getKey());
            }
        }
    
        // Simple keyword-based similarity check
        String[] keywords = {"void", "int", "for", "char", "if", "else", "while", "do", "break", "class"};
        int matchCount = 0;
    
        for (String keyword : keywords) {
            if (line1.contains(keyword) && line2.contains(keyword)) {
                matchCount++;
            }
        }
    
        // Consider lines similar if they share at least one keyword
        return matchCount > 0;
    }
    private void UserIdentifierCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UserIdentifierCheckBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_UserIdentifierCheckBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CppSimChek.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CppSimChek.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CppSimChek.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CppSimChek.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold> 
        CppSimChek checker = new CppSimChek();
        checker.setFileContent1("path/to/first/file");
        checker.setFileContent2("path/to/second/file");

        System.out.println("File 1 Content:");
        System.out.println(checker.getFileContent1());

        System.out.println("File 2 Content:");
        System.out.println(checker.getFileContent2());
    
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CppSimChek().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CalculateBtn;
    private javax.swing.JTextPane ContentFile1;
    private javax.swing.JTextPane ContentFile2;
    private javax.swing.JButton SelectBtn1;
    private javax.swing.JButton SelectBtn2;
    private javax.swing.JCheckBox UserIdentifierCheckBox;
    private javax.swing.JLabel fileNameLebel1;
    private javax.swing.JLabel fileNameLebel2;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea userIdentidierText;
    // End of variables declaration//GEN-END:variables
}
